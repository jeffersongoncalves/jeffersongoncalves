name: Update README with Starter Kits

on:
  push:
    branches:
      - main
      - restructure

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Update README with Starter Kits
        run: |
          # Create a script to update the README
          cat > update-readme.js << 'EOF'
          const fs = require('fs');
          
          // Main function to update README
          async function updateReadme() {
              // Read plugins.json
              const plugins = JSON.parse(fs.readFileSync('plugins.json', 'utf8'));
          
              // Read README_plugin.md as the plugin
              let readme = fs.readFileSync('README_plugin.md', 'utf8');
              console.log('Original README_plugin.md content:', readme);
          
              // Verify the plugin has been read correctly
              if (!readme || readme.trim() === '') {
                  throw new Error('README_plugin.md is empty or could not be read');
              }
          
              // Log the first line to verify it contains "laravel new starter"
              const firstLine = readme.split('\n')[0];
              console.log('First line of README_plugin.md:', firstLine);
          
              // Generate the formatted list
              let startkitList = '';
              for (const kit of plugins.startkit) {
                  startkitList += `| [**${kit.title}**](https://github.com/${kit.package}) | ![Latest Version](https://img.shields.io/packagist/v/${kit.package}.svg?style=flat-square) | ![Downloads](https://img.shields.io/packagist/dt/${kit.package}.svg?style=flat-square) | ![Stars](https://img.shields.io/github/stars/${kit.package}?style=flat-square) |\n`;
              }
          
              // Generate the formatted list
              let filamentList = '';
              for (const kit of plugins.filament) {
                  filamentList += `| [**${kit.title}**](https://github.com/${kit.package}) | ![Latest Version](https://img.shields.io/packagist/v/${kit.package}.svg?style=flat-square) | ![Downloads](https://img.shields.io/packagist/dt/${kit.package}.svg?style=flat-square) | ![Stars](https://img.shields.io/github/stars/${kit.package}?style=flat-square) |\n`;
              }
          
              // Generate the formatted list
              let laravelList = '';
              for (const kit of plugins.laravel) {
                  laravelList += `| [**${kit.title}**](https://github.com/${kit.package}) | ![Latest Version](https://img.shields.io/packagist/v/${kit.package}.svg?style=flat-square) | ![Downloads](https://img.shields.io/packagist/dt/${kit.package}.svg?style=flat-square) | ![Stars](https://img.shields.io/github/stars/${kit.package}?style=flat-square) |\n`;
              }
          
              // Generate the formatted list
              let novaList = '';
              for (const kit of plugins.nova) {
                  novaList += `| [**${kit.title}**](https://github.com/${kit.package}) | ![Latest Version](https://img.shields.io/packagist/v/${kit.package}.svg?style=flat-square) | ![Downloads](https://img.shields.io/packagist/dt/${kit.package}.svg?style=flat-square) | ![Stars](https://img.shields.io/github/stars/${kit.package}?style=flat-square) |\n`;
              }
          
              // Generate the formatted list
              let cakephpList = '';
              for (const kit of plugins.cakephp) {
                  cakephpList += `| [**${kit.title}**](https://github.com/${kit.package}) | ![Latest Version](https://img.shields.io/packagist/v/${kit.package}.svg?style=flat-square) | ![Downloads](https://img.shields.io/packagist/dt/${kit.package}.svg?style=flat-square) | ![Stars](https://img.shields.io/github/stars/${kit.package}?style=flat-square) |\n`;
              }
          
              // Replace placeholders in README
              console.log('Looking for placeholders in README_plugin...');
              console.log('README_plugin before replacement:', readme);
          
              // Use regex with global flag to ensure all occurrences are replaced
              readme = readme.replace(/\[STARTKIT\]/g, startkitList.trim());
              readme = readme.replace(/\[FILAMENT\]/g, filamentList.trim());
              readme = readme.replace(/\[LARAVEL\]/g, laravelList.trim());
              readme = readme.replace(/\[NOVA\]/g, novaList.trim());
              readme = readme.replace(/\[CAKEPHP\]/g, cakephpList.trim());
          
              console.log('Generated README content (excerpt):', readme.substring(0, 500) + '...');
              console.log('Startkit list generated:', startkitList);
              console.log('Filament list generated:', filamentList);
              console.log('Laravel list generated:', laravelList);
              console.log('Nova list generated:', novaList);
              console.log('CakePHP list generated:', cakephpList);
          
              // Write updated README
              fs.writeFileSync('README.md', readme);
          
              // Verify the README.md was written correctly
              const writtenReadme = fs.readFileSync('README.md', 'utf8');
              console.log('First line of written README.md:', writtenReadme.split('\n')[0]);
          
              if (writtenReadme !== readme) {
                  console.warn('WARNING: Written README.md does not match the generated content');
              }
          
              console.log('README.md has been updated with starter kits from plugins.json');
          }
          
          // Verify README_plugin.md exists before running
          if (!fs.existsSync('README_plugin.md')) {
              console.error('ERROR: README_plugin.md does not exist');
              process.exit(1);
          }
          
          // Run the update
          updateReadme().catch(err => {
              console.error('Error updating README:', err);
              process.exit(1);
          });
          EOF
          
          # Run the script
          node update-readme.js

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if README.md exists and show its content
          echo "Current README.md content (first few lines):"
          head README.md
          
          # Always add README.md since we're generating it from the template
          git add README.md
          
          # Check for changes in the staging area
          git status
          
          # Force the commit even if git thinks there are no changes
          git commit --allow-empty -m "Update README with latest starter kits from template"
          
          # Force push to ensure README.md is always updated
          git push --force origin HEAD:${{ github.ref }}